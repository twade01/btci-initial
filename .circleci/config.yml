version: 2

# Functions and Ref/Vars ============================================================================================

references:

working_directory: &working_directory
  ~/btci

terraform_config: &terraform_config
  docker:
      - image: hashicorp/terraform:light
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

set_creds: &set_creds
  run:
    name: set_creds
    command: |
      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        mkdir ~/.aws
        echo [default] >> ~/.aws/credentials
        echo aws_access_key_id=${awsa} >> ~/.aws/credentials
        echo aws_secret_access_key=${awss} >> ~/.aws/credentials
        echo [default] >> ~/.aws/config
        echo region=us-west-1 >> ~/.aws/config
        echo output=text >> ~/.aws/config
      else
        mkdir ~/.aws
        echo [default] >> ~/.aws/credentials
        echo aws_access_key_id=${awsa} >> ~/.aws/credentials
        echo aws_secret_access_key=${awss} >> ~/.aws/credentials
        echo [default] >> ~/.aws/config
        echo region=us-west-1 >> ~/.aws/config
        echo output=text >> ~/.aws/config
      fi

set_terraform_environment: &set_terraform_environment
  run:
    name: Configure terraform environment
    command: |
      cd && touch $BASH_ENV
      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        echo 'export TERRAFORM_ENVIRONMENT=production' >> $BASH_ENV
      else
        echo 'export TERRAFORM_ENVIRONMENT=staging' >> $BASH_ENV
      fi

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      source $BASH_ENV
      cd environments/$TERRAFORM_ENVIRONMENT
      terraform init

terraform_apply: &terraform_apply
    <<: *terraform_config
    steps:
      - *restore_repo
      - *set_creds
      - *set_terraform_environment
      - *terraform_init
      - attach_workspace:
          at: *working_directory
      - run:
          name: terraform apply
          command: |
            source $BASH_ENV
            cd environments/$TERRAFORM_ENVIRONMENT
            terraform apply --auto-approve ../../terraform.plan

# End Functions and Ref/Vars ============================================================================================

jobs:

# Packer ============================================================================================

  packer-validate:
    docker:
      - image: hashicorp/packer:light
    steps:
      - checkout
      - run:
          name: Validate Templates
          command: ls ./packer/*.json | xargs -I{} packer validate {}

  packer-build-ami:
    docker:
      - image: hashicorp/packer:light
    steps:
      - checkout
      - *set_creds
      - run:
          name: Build base ami
          command: packer build ./packer/packer.json
          no_output_timeout: 30m

# END Packer ============================================================================================

# Terraform ============================================================================================

  terraform-init:
    <<: *terraform_config
    steps:
      - checkout
      - *set_creds
      - *set_terraform_environment
      - run:
          name: terraform fmt
          command: |
            source $BASH_ENV
            cd environments/$TERRAFORM_ENVIRONMENT
            if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 0 ]; then
              echo "Fix terraform file format:"
              echo
              cat fmt_result.txt
              rm fmt_result.txt
              git checkout -- .
              echo
              echo "Please run terraform fmt"
              exit 1
            fi
      - *save_repo

  terraform-plan:
    <<: *terraform_config
    steps:
      - *restore_repo
      - *set_creds
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            source $BASH_ENV
            cd environments/$TERRAFORM_ENVIRONMENT
            terraform plan -out=../../terraform.plan
      - persist_to_workspace:
          root: *working_directory
          paths:
            - terraform.plan

  terraform-apply:
    <<: *terraform_apply

  terraform-apply-after-approval:
    <<: *terraform_apply


# END Terraform ============================================================================================

# ------------------------------------------------------------------------------------

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - packer-validate
      - packer-build-ami:
          requires:
            - packer-validate
      - terraform-init:
          requires:
            - packer-build-ami
      - terraform-plan:
          requires:
            - terraform-init
      - terraform-apply:
          requires:
            - terraform-plan
          filters:
            branches:
              ignore:
                - master
      - terraform-apply-after-approval:
          requires:
            - terraform-plan
          filters:
            branches:
              only: master
