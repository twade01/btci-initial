---
- hosts: localhost
  connection: local
  gather_facts: true    # gather OS info that is made available for tasks/roles
  become: yes           # majority of CIS tasks require root

  vars:
    - go_ver: go1.12.6.linux-amd64.tar.gz

  roles:
  - common

  tasks:

    - name: Download go
      shell: 'wget https://dl.google.com/go/{{go_ver}}'

    - name: Extract go
      shell: 'tar -C /usr/local -xzf {{go_ver}}'

    - name: Set Paths
      shell: |
        export PATH=$PATH:/usr/local/go/bin
        export GOROOT=$HOME/go
        export PATH=$PATH:$GOROOT/bin
        export GOPATH=$HOME/projects/go/

    - name: Verify go
      command: /usr/local/go/bin/go version
      register: go_output

    - debug:
        var: go_output

    - name: Mkdir for btcd
      file:
        path: /usr/local/go/src/github.com/btcd/
        state: directory
        mode: '0755'

    - name: Checkout btcd repo
      git:
        repo: https://github.com/btcsuite/btcd.git
        dest: /usr/local/go/src/github.com/btcd/

    - name: Install btcd
      shell: cd /usr/local/go/src/github.com/btcd && GO111MODULE=on /usr/local/go/bin/go install -v . ./cmd/...
      environment:
        GOPATH: /usr/local/go/

###### TESTING ------------------------------------------------------------------------------------------------------------------------ 
  
  # Start btcd on simnet 
    - name: Run btcd for testing 
      shell: /usr/local/go/bin/btcd --simnet --rpcuser=testuser --rpcpass=testp4ssw0rd & 
      register: run_btcd1
    - debug: 
        var: run_btcd1 
 
  # Install btcwallet
    - name: Mkdir for btcwallet
      file:
        path: /usr/local/go/src/github.com/btcwallet/
        state: directory
        mode: '0755'
    - name: Checkout btcwallet repo
      git:
        repo: https://github.com/btcsuite/btcwallet.git
        dest: /usr/local/go/src/github.com/btcwallet/
    - name: Install btcwallet
      shell: cd /usr/local/go/src/github.com/btcwallet && /usr/local/go/bin/go install -v . ./cmd/...
      # shell: cd /usr/local/go/src/github.com/btcwallet && GO111MODULE=on /usr/local/go/bin/go install -v . ./cmd/...
      # environment:
      #   GOPATH: /usr/local/go/
      register: btcwallet_installed
    - debug:
        var: btcwallet_installed


    - name: Install expect
      apt:
        name: expect
        state: latest

    # - name: find 
    #   shell: sudo updatedb
    # - name: locate
    #   shell: sudo locate btcwallet
    #   register: btcwallet_location
    # - debug:
    #     var: btcwallet_location


  # Create a new simnet wallet
    - name: Create a new simnet wallet
      # shell: bash /root/go/bin/btcwallet --simnet --create <<< $'test\ntest\nno\nno\nOK\n'
      # args:
      #   executable: /bin/bash
      shell: |
        set timeout 300
        spawn /root/go/bin/btcwallet --simnet --create

        expect "Enter the private passphrase for your new wallet:"
        send "test\n"

        expect "Confirm passphrase:"
        send "test\n"

        expect "Do you want to add an additional layer of encryption for public data?"
        send "\n"

        expect "Do you have an existing wallet seed you want to use?"
        send "\n"

        expect "Once you have stored the seed in a safe and secure location, enter"
        send "OK\n"

        expect "The wallet has been created successfully."
        send "\n"

        exit 0
      args:
        executable: /usr/bin/expect
      register: btcwallet_created
    - debug:
        var: btcwallet_created.stdout
    - debug:
        var: btcwallet_created.stderr

  # Start btcwallet on simnet
    - name: Start btcwallet on simnet
      shell: /root/go/bin/btcwallet --simnet --username=testuser --password=testp4ssw0rd &
      register: btcwallet_started
    - debug:
        var: btcwallet_started

  # Create a new simnet bitcoin address
    # - name: Create config file
    #   shell: mkdir /root/.btcwallet/ && touch /root/.btcwallet/btcwallet.conf
    - name: Create a new simnet bitcoin address
      shell: /usr/local/go/bin/btcctl --simnet --wallet --rpcuser=testuser --rpcpass=testp4ssw0rd getnewaddress &
      args:
        executable: /bin/bash
      register: btcwallet_bit_addr
    - debug:
        var: btcwallet_bit_addr #.stdout
    - debug:
        var: btcwallet_bit_addr.stdout_lines

  # Restart btcd with the mining address generated
    - name: Kill btcd
      shell: killall btcd &
    - name: Restart btcd with the mining address generated
      shell: '/usr/local/go/bin/btcd --simnet --rpcuser=testuser --rpcpass=testp4ssw0rd --miningaddr={{}}'
      register: btcwallet_mining
    - debug:
        var: btcwallet_mining

  # Instruct btcd to generate enough initial blocks for the first coinbase to mature
    - name: Instruct btcd to generate enough initial blocks for the first coinbase to mature
      shell: /usr/local/go/bin/btcctl --simnet --rpcuser=testuser --rpcpass=testp4ssw0rd generate 100
      register: btcwallet_genblocks
    - debug:
        var: btcwallet_genblocks

  # Check the wallet balance to ensure the coins are available
    - name: Check the wallet balance to ensure the coins are available
      shell: /usr/local/go/bin/btcctl --simnet --wallet --rpcuser=testuser --rpcpass=testp4ssw0rd getbalance
      register: btcwallet_balance
    - debug:
        var: btcwallet_balance

  ### CLEANUP

  # kill btcd
  # kill btcwallet
  # delete btcwallet repo
  # delete btcwallet
  # delete btcwallet executable
 
###### END TESTING -------------------------------------------------------------------------------------------------------------------- 

    - name: Run btcd
      shell: /usr/local/go/bin/btcd &
      register: run_btcd

    - debug:
        var: run_btcd

    - name: Start btcd at reboot in crontab
      cron:
        name: "Start btcd at reboot"
        special_time: reboot
        job: "/usr/local/go/bin/btcd &"
